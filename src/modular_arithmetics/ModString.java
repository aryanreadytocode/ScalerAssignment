package modular_arithmetics;
/*
* Problem Description
You are given a large number in the form of a string A where each character denotes a digit of the number.
You are also given a number B. You have to find out the value of A % B and return it.



Problem Constraints
1 <= A.length() <= 105
0 <= Ai <= 9
1 <= B <= 109


Input Format
The first argument is a string A.
The second argument is an integer B.


Output Format
Return a single integer denoting the value of A % B.


Example Input
Input 1:
A = "143"
B = 2
Input 2:

A = "43535321"
B = 47


Example Output
Output 1:
1
Output 2:

20


Example Explanation
Explanation 1:
143 is an odd number so 143 % 2 = 1.
Explanation 2:

43535321 % 47 = 20
* */
public class ModString {

    public static void main(String[] args) {
        findMod("6562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "952003744011174036562800446546751053033681283622332585949169375825307419010747907087102529693" +
                "9885027146638972935272403637342849378131811350009951926647422919046451714384236" +
                "95200374401117403", 36173);
    }

    public static int findMod(String A, int B) {
        int n = A.length();
        int res = 0;
        long exp = 1;
        for( int i = 0; i<n; i++){
            System.out.println(i);
            exp = exp%B;
            res += Character.getNumericValue(A.charAt(n-1-i)) * exp;
            res = res%B;
            exp = exp*10;
        }
        return res;
    }
}
